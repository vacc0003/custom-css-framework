// Cursor utilities

.cursor-default {
  cursor: default;
}

.cursor-pointer {
  cursor: pointer;
}

.cursor-wait {
  cursor: wait;
}

.cursor-text {
  cursor: text;
}

.cursor-move {
  cursor: move;
}

.cursor-help {
  cursor: help;
}

// Pointer events
.pointer-events-none {
  pointer-events: none;
}

// Visibility
.visible {
  visibility: visible;
}

.invisible {
  visibility: hidden;
}

// Opacity
.opacity-0 {
  opacity: 0;
}

.opacity-25 {
  opacity: 0.25;
}

.opacity-50 {
  opacity: 0.5;
}

.opacity-75 {
  opacity: 0.75;
}

.opacity-100 {
  opacity: 1;
}

// Border radius
.rounded-none {
  border-radius: 0;
}

.rounded-sm {
  border-radius: 0.125rem;
}

.rounded {
  border-radius: 0.25rem;
}

.rounded-md {
  border-radius: 0.375rem;
}

.rounded-lg {
  border-radius: 0.5rem;
}

.rounded-xl {
  border-radius: 0.75rem;
}

.rounded-2xl {
  border-radius: 1rem;
}

.rounded-3xl {
  border-radius: 1.5rem;
}

.rounded-full {
  border-radius: 9999px;
}

// Individual corners
.rounded-t-none {
  border-top-left-radius: 0;
  border-top-right-radius: 0;
}

.rounded-r-none {
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;
}

.rounded-b-none {
  border-bottom-right-radius: 0;
  border-bottom-left-radius: 0;
}

.rounded-l-none {
  border-top-left-radius: 0;
  border-bottom-left-radius: 0;
}

.rounded-t {
  border-top-left-radius: 0.25rem;
  border-top-right-radius: 0.25rem;
}

.rounded-r {
  border-top-right-radius: 0.25rem;
  border-bottom-right-radius: 0.25rem;
}

.rounded-b {
  border-bottom-right-radius: 0.25rem;
  border-bottom-left-radius: 0.25rem;
}

.rounded-l {
  border-top-left-radius: 0.25rem;
  border-bottom-left-radius: 0.25rem;
}

.rounded-tl {
  border-top-left-radius: 0.25rem;
}

.rounded-tr {
  border-top-right-radius: 0.25rem;
}

.rounded-br {
  border-bottom-right-radius: 0.25rem;
}

.rounded-bl {
  border-bottom-left-radius: 0.25rem;
}

// Transitions
.transition-all {
  transition-property: all;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
}

.transition {
  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
}

.transition-colors {
  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
}

.transition-opacity {
  transition-property: opacity;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
}

.transition-shadow {
  transition-property: box-shadow;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
}

.transition-transform {
  transition-property: transform;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
}

// Duration
.duration-75 {
  transition-duration: 75ms;
}

.duration-100 {
  transition-duration: 100ms;
}

.duration-150 {
  transition-duration: 150ms;
}

.duration-200 {
  transition-duration: 200ms;
}

.duration-300 {
  transition-duration: 300ms;
}

.duration-500 {
  transition-duration: 500ms;
}

.duration-700 {
  transition-duration: 700ms;
}

.duration-1000 {
  transition-duration: 1000ms;
}

// Background colors with opacity
@each $color, $value in (
  'white': #ffffff,
  'black': #000000,
  'very-light-gray': #D3D3D3
) {
  .bg-#{$color} {
    background-color: $value;
  }

  @each $opacity in (0, 5, 10, 20, 25, 30, 40, 50, 60, 70, 75, 80, 90, 95, 100) {
    .bg-#{$color}\/#{$opacity} {
      background-color: rgba($value, $opacity / 100);
    }
  }
}

// Dark mode background colors
@media (prefers-color-scheme: dark) {
  @each $color, $value in (
    'white': #000000,
    'black': #ffffff,
    'very-light-gray': #D3D3D3
  ) {
    .dark\:bg-#{$color} {
      background-color: $value;
    }

    @each $opacity in (0, 5, 10, 20, 25, 30, 40, 50, 60, 70, 75, 80, 90, 95, 100) {
      .dark\:bg-#{$color}\/#{$opacity} {
        background-color: rgba($value, $opacity / 100);
      }
    }
  }
}

// Interactive states
.hover {
  &:hover {
    opacity: 0.75;
  }
}

.focus {
  &:focus {
    outline: none;
    opacity: 0.75;
  }
}

.active {
  &:active {
    opacity: 0.5;
  }
}

// Hover background colors with opacity
@each $color, $value in (
  'white': #ffffff,
  'black': #000000
) {
  .hover\:bg-#{$color}:hover {
    background-color: $value !important;
  }

  @each $opacity in (0, 5, 10, 20, 25, 30, 40, 50, 60, 70, 75, 80, 90, 95, 100) {
    .hover\:bg-#{$color}\/#{$opacity}:hover {
      background-color: rgba($value, $opacity / 100) !important;
    }
  }
}

// Dark mode hover background colors
@media (prefers-color-scheme: dark) {
  @each $color, $value in (
    'white': #000000,
    'black': #ffffff
  ) {
    .dark\:hover\:bg-#{$color}:hover {
      background-color: $value !important;
    }

    @each $opacity in (0, 5, 10, 20, 25, 30, 40, 50, 60, 70, 75, 80, 90, 95, 100) {
      .dark\:hover\:bg-#{$color}\/#{$opacity}:hover {
        background-color: rgba($value, $opacity / 100) !important;
      }
    }
  }
}

// Z-index
.z-0 {
  z-index: 0;
}

.z-10 {
  z-index: 10;
}

.z-20 {
  z-index: 20;
}

.z-30 {
  z-index: 30;
}

.z-40 {
  z-index: 40;
}

.z-50 {
  z-index: 50;
}

.z-auto {
  z-index: auto;
}

// Overflow
.overflow-auto {
  overflow: auto;
}

.overflow-hidden {
  overflow: hidden;
}

.overflow-visible {
  overflow: visible;
}

.overflow-scroll {
  overflow: scroll;
}

.overflow-x-auto {
  overflow-x: auto;
}

.overflow-y-auto {
  overflow-y: auto;
}

.overflow-x-hidden {
  overflow-x: hidden;
}

.overflow-y-hidden {
  overflow-y: hidden;
}

// Resize
.resize-none {
  resize: none;
}

.resize {
  resize: both;
}

.resize-y {
  resize: vertical;
}

.resize-x {
  resize: horizontal;
}

// Text decoration
.underline {
  text-decoration: underline;
}

.line-through {
  text-decoration: line-through;
}

.no-underline {
  text-decoration: none;
}

// Text transform
.uppercase {
  text-transform: uppercase;
}

.lowercase {
  text-transform: lowercase;
}

.capitalize {
  text-transform: capitalize;
}

.normal-case {
  text-transform: none;
}

// Text overflow
.truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.text-ellipsis {
  text-overflow: ellipsis;
}

.text-clip {
  text-overflow: clip;
}

// Custom hover background using theme variables
.hover-bg {
  &:hover {
    background-color: #F3F4F6 !important;
  }
}

[data-theme="dark"] .hover-bg {
  &:hover {
    background-color: #18181B !important;
  }
}

