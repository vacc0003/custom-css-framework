@use '../variables/sizing';

:root {
  --container-3xs: 16rem;   /* 256px */
  --container-2xs: 18rem;   /* 288px */
  --container-xs: 20rem;    /* 320px */
  --container-sm: 24rem;    /* 384px */
  --container-md: 28rem;    /* 448px */
  --container-lg: 32rem;    /* 512px */
  --container-xl: 36rem;    /* 576px */
  --container-2xl: 42rem;   /* 672px */
  --container-3xl: 48rem;   /* 768px */
  --container-4xl: 56rem;   /* 896px */
  --container-5xl: 64rem;   /* 1024px */
  --container-6xl: 72rem;   /* 1152px */
  --container-7xl: 80rem;   /* 1280px */
}

.container, .nav-container {
  max-width: 72rem;
  margin: 0 auto;
  width: 100%;
}

.main-nav {
  width: 100%;
  background: var(--bg-color);
  padding: 0;
  margin-bottom: 2rem;
  border-bottom: 1px solid var(--border-color);
  height: 56px;
  display: flex;
  align-items: center;
  position: sticky;
  top: 0;
  z-index: 100;
}

.nav-container {
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 1.5rem;
  width: 100%;
  max-width: none;
  margin: 0;
  padding: 0 2rem;
  height: 56px;
}

.nav-logo {
  font-family: 'Inter var', 'Inter', ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif;
  font-size: 1.25rem;
  font-weight: 500;
  color: var(--text-color);
  margin-right: 2rem;
  flex-shrink: 0;
  display: flex;
  align-items: center;
  height: 56px;
}

.nav-items {
  display: flex;
  align-items: center;
  gap: 0.25rem;
  margin: 0;
  padding: 0;
  list-style: none;
  flex: 1;
  justify-content: flex-end;
  max-width: none;
  height: 56px;
}

.nav-item {
  font-family: 'Inter var', 'Inter', ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif;
  font-size: 1rem;
  color: var(--text-color);
  cursor: pointer;
  transition: color 0.2s;
  display: flex;
  align-items: center;
  height: 56px;
  padding: 0;
  margin: 0 !important;
}

.nav-item:hover {
  color: #38adfa;
}

.nav-item.nav-toggle {
  margin-left: 2rem;
  padding: 0;
  height: 56px;
  display: flex;
  align-items: center;
}

section {
  padding-top: map-get(sizing.$spacing, 3);
  padding-bottom: map-get(sizing.$spacing, 3);
}

.nav-link {
  display: block;
  font-family: 'Inter var', 'Inter', ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif;
  font-size: 0.875rem;
  font-weight: 400;
  color: #030712;
  text-decoration: none;
  padding: 0.25rem 0.75rem;
  border-radius: 0.375rem;
  transition: color 0.15s;
  line-height: 1.5;
}

[data-theme="dark"] .nav-link {
  color: #fff;
}

.nav-link:hover,
.nav-link:focus {
  background: none;
  color: #38bdf8;
}

[data-theme="dark"] .nav-link:hover,
[data-theme="dark"] .nav-link:focus {
  background: none;
  color: #38bdf8;
}

// Display classes
$display: (
  inline: inline,
  inline-block: inline-block,
  block: block,
  flex: flex,
  inline-flex: inline-flex,
  grid: grid,
  inline-grid: inline-grid,
  table: table,
  inline-table: inline-table,
  hidden: none
);

@each $key, $value in $display {
  .#{$key} {
    display: $value;
  }
}

//Screen reader only classes
.sr-only{
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border-width: 0;
}
.not-sr-only{
  position: static;
  width: auto;
  height: auto;
  padding: 0;
  margin: 0;
  overflow: visible;
  clip: auto;
  white-space: normal;  
}

// Flexbox Direction
$flex-directions: (
  row: row,
  row-reverse: row-reverse,
  col: column,
  col-reverse: column-reverse
);

@each $name, $value in $flex-directions {
  .flex-#{$name} {
    flex-direction: #{$value};
  }
}

// Flexbox Wrap
$flex-wraps: (
  wrap: wrap,
  nowrap: nowrap
);

@each $name, $value in $flex-wraps {
  .flex-#{$name} {
    flex-wrap: #{$value};
  }
}

//Grid Columns
@for $i from 1 through 12 {
  .grid-cols-#{$i} {    
    grid-template-columns: repeat(#{$i}, minmax(0, 1fr));
  }
}
.grid-cols-none { grid-template-columns: none !important; }
.grid-cols-subgrid { grid-template-columns: subgrid !important; }
// Arbitrary value utility (static example)
.grid-cols-\[value\] { grid-template-columns: value !important; }
// Custom property utility (static example)
.grid-cols-\(--custom-property\) { grid-template-columns: var(--custom-property) !important; }

// Grid Col Spans, Grid Row Spans, Flex Grow
@for $i from 1 through 12 {
  .col-span-#{$i} {
    grid-column: span #{$i} / span #{$i};
  }
  .row-span-#{$i} {
    grid-row: span #{$i} / span #{$i};
  }
  .flex-grow-#{$i} {
    flex-grow: #{$i};
  }
}

// Grid Column Span Full
.col-span-full {
  grid-column: 1 / -1 !important;
}
// Grid Column Span Custom Property (static example)
.col-span-\(\) {
  grid-column: span var(--custom-property) / span var(--custom-property) !important;
}
// Grid Column Span Arbitrary Value (static example)
.col-span-\[value\] {
  grid-column: span value / span value !important;
}
// Grid Column Start Utilities
@for $i from 1 through 12 {
  .col-start-#{$i} {
    grid-column-start: #{$i} !important;
  }
}
.col-start-auto {
  grid-column-start: auto !important;
}
// Grid Column Start Custom Property (static example)
.col-start-\(\) {
  grid-column-start: var(--custom-property) !important;
}
// Grid Column Start Arbitrary Value (static example)
.col-start-\[value\] {
  grid-column-start: value !important;
}
// Grid Column End Utilities
@for $i from 1 through 12 {
  .col-end-#{$i} {
    grid-column-end: #{$i} !important;
  }
}

//Align Items Utilities
$align-items: (
  start: flex-start,
  end: flex-end,
  center: center,
  stretch: stretch,
  baseline: baseline
);

@each $name, $value in $align-items {
  .items-#{$name} {
    align-items: #{$value} !important;
  }
}

$self-alignments: (
  auto: auto,
  start: flex-start,
  end: flex-end,  
  center: center, 
  stretch: stretch,
  baseline: baseline, 
);

@each $name, $value in $self-alignments {
  .self-#{$name} {
    align-self: #{$value};
  }
}

// Justify Content Utilities (extended)
.justify-start { justify-content: flex-start !important; }
.justify-end { justify-content: flex-end !important; }
.justify-end-safe { justify-content: safe flex-end !important; }
.justify-center { justify-content: center !important; }
.justify-center-safe { justify-content: safe center !important; }
.justify-between { justify-content: space-between !important; }
.justify-around { justify-content: space-around !important; }
.justify-evenly { justify-content: space-evenly !important; }
.justify-stretch { justify-content: stretch !important; }
.justify-baseline { justify-content: baseline !important; }
.justify-normal { justify-content: normal !important; }

@each $key, $value in sizing.$spacing {
  .gap-#{$key} {
    gap: #{$value} !important;
  }
  .gap-x-#{$key} {
    column-gap: #{$value} !important;
  }
  .gap-y-#{$key} {
    row-gap: #{$value} !important;
  }
}

.collapsible-content {
  max-height: 0;
  overflow: hidden;
  transition: max-height 0.3s ease-out;
}
.collapsible-content.expanded {
  max-height: 2000px; // or a value large enough for your content
  transition: max-height 0.5s ease-in;
}

// Max-height utilities
.max-h-0 {
  max-height: 0 !important;
}
.max-h-2000 {
  max-height: 2000px !important;
}

// Transition utilities
.transition-max-height {
  transition: max-height 0.3s ease-out !important;
}
.transition-max-height-in {
  transition: max-height 0.5s ease-in !important;
}

// Position utilities
.static {
  position: static;
}

.fixed {
  position: fixed;
}

.absolute {
  position: absolute;
}

.relative {
  position: relative;
}

.sticky {
  position: sticky;
}

// Object fit
.object-contain {
  object-fit: contain;
}

.object-cover {
  object-fit: cover;
}

.object-fill {
  object-fit: fill;
}

.object-none {
  object-fit: none;
}

.object-scale-down {
  object-fit: scale-down;
}

// Object position
.object-center {
  object-position: center;
}

.object-top {
  object-position: top;
}

.object-bottom {
  object-position: bottom;
}

.object-left {
  object-position: left;
}

.object-right {
  object-position: right;
}

// Flex Basis Utilities
@each $key, $value in sizing.$spacing {
  .basis-#{$key} {
    flex-basis: #{$value} !important;
  }
}
.basis-auto {
  flex-basis: auto !important;
}
.basis-full {
  flex-basis: 100% !important;
}

// Flex Basis Fraction Utilities
.basis-1\/4 { flex-basis: 25% !important; }
.basis-2\/4 { flex-basis: 50% !important; }
.basis-3\/4 { flex-basis: 75% !important; }

// Max Width Utilities (Tailwind-style)
.max-w-xs { max-width: 20rem !important; }   // 320px
.max-w-sm { max-width: 24rem !important; }   // 384px
.max-w-md { max-width: 28rem !important; }   // 448px
.max-w-lg { max-width: 32rem !important; }   // 512px
.max-w-xl { max-width: 36rem !important; }   // 576px
.max-w-2xl { max-width: 42rem !important; }  // 672px
.max-w-3xl { max-width: 48rem !important; }  // 768px
.max-w-4xl { max-width: 56rem !important; }  // 896px
.max-w-5xl { max-width: 64rem !important; }  // 1024px
.max-w-6xl { max-width: 72rem !important; }  // 1152px
.max-w-full { max-width: 100% !important; }
.max-w-screen-sm { max-width: 640px !important; }
.max-w-screen-md { max-width: 768px !important; }
.max-w-screen-lg { max-width: 1024px !important; }
.max-w-screen-xl { max-width: 1280px !important; }
.max-w-screen-2xl { max-width: 1536px !important; }

// Responsive display utilities
.hidden { display: none !important; }

// Show/hide on small screens (sm: 640px)
@media (max-width: 639.98px) {
  .sm\:hidden { display: none !important; }
}
@media (min-width: 640px) {
  .sm\:block { display: block !important; }
}
// Show/hide on medium screens (md: 768px)
@media (max-width: 767.98px) {
  .md\:hidden { display: none !important; }
}
@media (min-width: 768px) {
  .md\:block { display: block !important; }
}
// Show/hide on large screens (lg: 1024px)
@media (max-width: 1023.98px) {
  .lg\:hidden { display: none !important; }
}
@media (min-width: 1024px) {
  .lg\:block { display: block !important; }
}
// Show/hide on extra large screens (xl: 1280px)
@media (max-width: 1279.98px) {
  .xl\:hidden { display: none !important; }
}
@media (min-width: 1280px) {
  .xl\:block { display: block !important; }
}
// Show/hide on 2xl screens (2xl: 1536px)
@media (max-width: 1535.98px) {
  .\32xl\:hidden { display: none !important; }
}
@media (min-width: 1536px) {
  .\32xl\:block { display: block !important; }
}

// Tailwind-style flex utilities
.flex-1 { flex: 1 1 0% !important; }
.flex-auto { flex: 1 1 auto !important; }
.flex-initial { flex: 0 1 auto !important; }
.flex-none { flex: none !important; }

// Flex Grow utilities
.grow { flex-grow: 1 !important; }
.grow-0 { flex-grow: 0 !important; }
.grow-1 { flex-grow: 1 !important; }
// Example for arbitrary value (static):
.grow-\[2\] { flex-grow: 2 !important; }
.grow-\(--custom\) { flex-grow: var(--custom) !important; }

// Flex Shrink utilities
.shrink { flex-shrink: 1 !important; }
.shrink-0 { flex-shrink: 0 !important; }
.shrink-1 { flex-shrink: 1 !important; }
// Example for arbitrary value (static):
.shrink-\[2\] { flex-shrink: 2 !important; }
.shrink-\(--custom\) { flex-shrink: var(--custom) !important; }

// Numeric flex shorthand utilities
@for $i from 2 through 12 {
  .flex-#{$i} {
    flex: #{$i} #{$i} 0% !important;
  }
}

// Numeric flex-grow utilities
@for $i from 2 through 12 {
  .grow-#{$i} {
    flex-grow: #{$i} !important;
  }
}

// Numeric flex-shrink utilities
@for $i from 2 through 12 {
  .shrink-#{$i} {
    flex-shrink: #{$i} !important;
  }
}

// Fractional flex shorthand utilities (common fractions)
.flex-1\/2 { flex: 0 0 50% !important; }
.flex-1\/3 { flex: 0 0 33.333333% !important; }
.flex-2\/3 { flex: 0 0 66.666667% !important; }
.flex-1\/4 { flex: 0 0 25% !important; }
.flex-2\/4 { flex: 0 0 50% !important; }
.flex-3\/4 { flex: 0 0 75% !important; }
.flex-1\/5 { flex: 0 0 20% !important; }
.flex-2\/5 { flex: 0 0 40% !important; }
.flex-3\/5 { flex: 0 0 60% !important; }
.flex-4\/5 { flex: 0 0 80% !important; }
.flex-1\/6 { flex: 0 0 16.666667% !important; }
.flex-2\/6 { flex: 0 0 33.333333% !important; }
.flex-3\/6 { flex: 0 0 50% !important; }
.flex-4\/6 { flex: 0 0 66.666667% !important; }
.flex-5\/6 { flex: 0 0 83.333333% !important; }

.basis-3xs { flex-basis: var(--container-3xs) !important; }
.basis-2xs { flex-basis: var(--container-2xs) !important; }
.basis-xs { flex-basis: var(--container-xs) !important; }
.basis-sm { flex-basis: var(--container-sm) !important; }
.basis-md { flex-basis: var(--container-md) !important; }
.basis-lg { flex-basis: var(--container-lg) !important; }
.basis-xl { flex-basis: var(--container-xl) !important; }
.basis-2xl { flex-basis: var(--container-2xl) !important; }
.basis-3xl { flex-basis: var(--container-3xl) !important; }
.basis-4xl { flex-basis: var(--container-4xl) !important; }
.basis-5xl { flex-basis: var(--container-5xl) !important; }
.basis-6xl { flex-basis: var(--container-6xl) !important; }
.basis-7xl { flex-basis: var(--container-7xl) !important; }

.flex-wrap-reverse { flex-wrap: wrap-reverse !important; }

// Grid Column Utilities
.col-auto {
  grid-column: auto !important;
}
@for $i from 1 through 12 {
  .col-#{$i} {
    grid-column: #{$i} !important;
  }
  .-col-#{$i} {
    grid-column: calc(#{$i} * -1) !important;
  }
  .-col-start-#{$i} {
    grid-column-start: calc(#{$i} * -1) !important;
  }
  .-col-end-#{$i} {
    grid-column-end: calc(#{$i} * -1) !important;
  }
}
// Arbitrary value utility (static example)
.col-\[value\] {
  grid-column: value !important;
}

// Grid Row Span Full
.row-span-full {
  grid-row: 1 / -1 !important;
}
// Grid Row Span Arbitrary Value (static example)
.row-span-\[value\] {
  grid-row: span value / span value !important;
}
// Grid Row Start Utilities
@for $i from 1 through 12 {
  .row-start-#{$i} {
    grid-row-start: #{$i} !important;
  }
  .-row-start-#{$i} {
    grid-row-start: calc(#{$i} * -1) !important;
  }
}
.row-start-auto {
  grid-row-start: auto !important;
}
// Grid Row Start Arbitrary Value (static example)
.row-start-\[value\] {
  grid-row-start: value !important;
}
// Grid Row End Utilities
@for $i from 1 through 12 {
  .row-end-#{$i} {
    grid-row-end: #{$i} !important;
  }
  .-row-end-#{$i} {
    grid-row-end: calc(#{$i} * -1) !important;
  }
}
.row-end-auto {
  grid-row-end: auto !important;
}
// Grid Row End Arbitrary Value (static example)
.row-end-\[value\] {
  grid-row-end: value !important;
}
// Grid Row Utilities
.row-auto {
  grid-row: auto !important;
}
@for $i from 1 through 12 {
  .row-#{$i} {
    grid-row: #{$i} !important;
  }
  .-row-#{$i} {
    grid-row: calc(#{$i} * -1) !important;
  }
}
// Arbitrary value utility (static example)
.row-\[value\] {
  grid-row: value !important;
}

// Grid Flow Utilities
.grid-flow-row { grid-auto-flow: row !important; }
.grid-flow-col { grid-auto-flow: column !important; }
.grid-flow-row-dense { grid-auto-flow: row dense !important; }
.grid-flow-col-dense { grid-auto-flow: column dense !important; }

// Grid Rows Utilities
@for $i from 1 through 12 {
  .grid-rows-#{$i} {
    grid-template-rows: repeat(#{$i}, minmax(0, 1fr));
  }
}
.grid-rows-none { grid-template-rows: none !important; }
.grid-rows-subgrid { grid-template-rows: subgrid !important; }
// Arbitrary value utility (static example)
.grid-rows-\[value\] { grid-template-rows: value !important; }
// Custom property utility (static example)
.grid-rows-\(--custom-property\) { grid-template-rows: var(--custom-property) !important; }

// Justify Items Utilities
.justify-items-start { justify-items: start !important; }
.justify-items-end { justify-items: end !important; }
.justify-items-end-safe { justify-items: safe end !important; }
.justify-items-center { justify-items: center !important; }
.justify-items-center-safe { justify-items: safe center !important; }
.justify-items-stretch { justify-items: stretch !important; }
.justify-items-normal { justify-items: normal !important; }